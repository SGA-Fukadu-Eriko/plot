# test
 Error（評価指標）は、MSE　平均2乗誤差が一般的かと思います（←このあと交差検定（モデルの精度）しても良いかも知れせん）
GradientBoosting回帰のdefaultParamsはデフォルトでSquaredErrorを使用しております。

⇒勾配ブースティングにおける最適化は、この誤差を最小化する＝平均2乗誤差がいかに小さな値化を求めることになります。


以前pythonでGradientBoostingとSVCのアンサンブルで行った時は、

精度評価として精度評価　：Accurancy
AUC　：Area Under the ROC Curve
交差検定:スコア評価し特徴量の影響度グラフ

などをプロットして、いました。試しに昔のコードもお送ります。
今回のパラメータは、scalaのSpark　RDDのRegressionの場合デフォルトで、
boostingStrategy.numIterations
boostingStrategy.treeStrategy.maxDepth = 5 boostingStrategy.treeStrategy.categoricalFeaturesInfo
などの使用が可能かと思います。


//パッケージのインポート
// scalastyle:off
 println
package org.apache.spark.examples.mllib

import org.apache.spark.{SparkConf, SparkContext} // $example on$ import org.apache.spark.mllib.tree.GradientBoostedTrees
import org.apache.spark.mllib.tree.configuration.BoostingStrategy
import org.apache.spark.mllib.tree.model.GradientBoostedTreesModel
import org.apache.spark.mllib.util.MLUtils
// $example off$

//モデリング（メインClassifier）
object GradientBoostingRegressionExample {
  def main(args: Array[String]): Unit = {
    val conf = new SparkConf().setAppName("GradientBoostedTreesRegressionExample")
    val sc = new SparkContext(conf)
    // $example on$
    // Load and parse the data file.
    val data = MLUtils.loadLibSVMFile(sc, "data/mllib/sample_libsvm_data.txt")
    // Split the data into training and test sets (30% held out for testing)
    val splits = data.randomSplit(Array(0.7, 0.3))
    val (trainingData, testData) = (splits(0), splits(1))

//学習器
    // Train a
 GradientBoostedTrees model.
    // The defaultParams for Regression use SquaredError by default.
    val boostingStrategy = BoostingStrategy.defaultParams("Regression")
    boostingStrategy.numIterations = 3 // Note: Use more iterations in practice.
    boostingStrategy.treeStrategy.maxDepth = 5
    // Empty categoricalFeaturesInfo indicates all features are continuous.
    boostingStrategy.treeStrategy.categoricalFeaturesInfo = Map[Int, Int]()

    val model = GradientBoostedTrees.train(trainingData, boostingStrategy)

    //訓練データ
 instances and compute test error
    val labelsAndPredictions = testData.map { point =>
      val prediction = model.predict(point.features)
      (point.label, prediction)
    }
    val testMSE = labelsAndPredictions.map{ case(v, p) => math.pow((v - p), 2)}.mean()
    println(s"Test Mean Squared Error = $testMSE")
    println(s"Learned regression GBT model:\n ${model.toDebugString}")

    // 保存とロード
 model
    model.save(sc, "target/tmp/myGradientBoostingRegressionModel")
    val sameModel = GradientBoostedTreesModel.load(sc,
      "target/tmp/myGradientBoostingRegressionModel")
    // $example off$

    sc.stop()
  }
}
// scalastyle:on println
